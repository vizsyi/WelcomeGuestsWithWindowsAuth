@model WelcomeScreen.Models.WelcomeVisit

@{
    ViewBag.Title = "Új látogatás";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Visit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Visit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Visit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Sel_Comp_ID
                    , Model.AssignableCompanies, "- Válassz partnercéget -"
                    , new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-1">
                @Html.EditorFor(model => model.FromTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FromTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-1">
                @Html.EditorFor(model => model.ToTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ToTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2">
                <a href='@Url.Action("Index")' class="btn btn-default">
                    &laquo; <img src="~/Images/list.png" height="21" /> Vissza a listára
                </a>
            </div>
            <div class="col-md-10">
                <input type="submit" value="Létrehozás" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script>
        $(function () {
            $("#FromDate").datepicker({
                dateFormat: "yy.mm.dd.",
                prevText: "Előző hónap",
                nextText: "Következő hónap",
                dayNamesMin: ["V", "H", "K", "Sz", "Cs", "P", "Szo"],
                monthNamesShort: ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
                changeMonth: true,
                changeYear: true,
                //yearRange: "-10:+10",
                minDate: new Date(Date.now() - 4 * 86400000),
                maxDate: new Date(Date.now() + 458 * 86400000),
                firstDay: 1,
                showMonthAfterYear: true,
                bottonText: "naNa"
            });

            $("#ToDate").datepicker({
                dateFormat: "yy.mm.dd.",
                prevText: "Előző hónap",
                nextText: "Következő hónap",
                dayNamesMin: ["V", "H", "K", "Sz", "Cs", "P", "Szo"],
                monthNamesShort: ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
                changeMonth: true,
                changeYear: true,
                minDate: new Date(),
                maxDate: new Date(Date.now() + 458 * 86400000),
                firstDay: 1,
                showMonthAfterYear: true,
                bottonText: "naNa"
            });


        });
    </script>
}